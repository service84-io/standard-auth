plugins {
  id 'maven-publish'
  id 'signing'
  id 'java-library'
  id 'eclipse'
  id 'java'
}

apply plugin: 'eclipse'
apply plugin: 'java'

def s84Group = 'io.service84.library'
def s84Name = 'Standard Auth'
def s84JarName = 'standardauth'
def s84Description = 'Provide configurable RSA JWT with scope Auth Filters for a Spring Service'
def s84GithubBase = 'https://github.com/service84-io/standard-auth'
def s84Version = '1.2.1-SNAPSHOT'

// configure all java components to be published
publishing {
  publications {
    maven(MavenPublication) {
      from(components.java)
    }
  }
  repositories {
    maven {
      name = 'OSSRH'
      def releasesURL = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      def snapshotsURL = 'https://oss.sonatype.org/content/repositories/snapshots'
      url = s84Version.endsWith('SNAPSHOT') ? snapshotsURL : releasesURL

      credentials {
        def ossUsername = project.hasProperty('ioService84OSSUsername') ? ioService84OSSUsername : 'Unknown user'
        def ossPassword = project.hasProperty('ioService84OSSPassword') ? ioService84OSSPassword : 'Unknown password'
        username = ossUsername
        password = ossPassword
      }
    }
  }
}

// ossrh requires javadoc and sources https://central.sonatype.org/pages/requirements.html
java {
  withJavadocJar()
  withSourcesJar()
}

jar {
  archiveBaseName = s84JarName
  archiveVersion = s84Version
  enabled = true
}

// ossrh requries signing https://central.sonatype.org/pages/requirements.html
// https://docs.gradle.org/current/userguide/signing_plugin.html
// this only configures signing if the key is found
// For signing you need to make signingKey and signingPassword available properties See https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
// The following makes the key available via the Gradle Property signingKey
// export ORG_GRADLE_PROJECT_signingKey=`cat test-private.pgp`
// export ORG_GRADLE_PROJECT_signingPassword='password'
// After making the Gradle properties above available, you can try signing using
// gradle signMavenPublication
//
// NOTE: If you are using the legacy publishing you need to sign using the info at https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signing_pom_files
def hasSigningKey = project.hasProperty('signing.keyId') || project.findProperty('signingKey')

if(hasSigningKey) {
  sign(project)
}

void sign(Project project) {
  project.signing {
    required { project.gradle.taskGraph.hasTask('publish') }
    def signingKeyId = project.findProperty('signingKeyId')
    def signingKey = project.findProperty('signingKey')
    def signingPassword = project.findProperty('signingPassword')

    if (signingKeyId) {
      useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    } else if (signingKey) {
      useInMemoryPgpKeys(signingKey, signingPassword)
    }

    sign publishing.publications.maven
  }
}

// customize the pom so it complies to Maven central requirements https://central.sonatype.org/pages/requirements.html
// https://docs.gradle.org/current/userguide/maven_plugin.html#sec:maven_pom_generation
project.plugins.withType(MavenPublishPlugin).all {
  PublishingExtension publishing = project.extensions.getByType(PublishingExtension)

  publishing.publications.withType(MavenPublication).all { mavenPublication ->
    mavenPublication.pom {
      name = s84Name
      packaging = 'jar'
      description = s84Description
      groupId = s84Group
      artifactId = s84JarName
      version = s84Version
      url = s84GithubBase

      scm {
        connection = 'scm:git:' + s84GithubBase + '.git'
        developerConnection = 'scm:git:' + s84GithubBase + '.git'
        url = s84GithubBase
      }

      licenses {
        license {
          name = 'The Apache License, Version 2.0'
          url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
      }

      developers {
        developer {
          id = 'tyler'
          name = 'Tyler'
          email = 'Tyler@service84.io'
        }
      }
    }
  }
}

sourceCompatibility = 11.0

repositories {
  jcenter()
  mavenCentral()
  maven { url 'https://plugins.gradle.org/m2/' }
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

configurations.all {
  exclude module: 'slf4j-jdk14'
}

dependencies {
  compileOnly 'org.springframework.security:spring-security-web:5.0.0.RELEASE'

  compileOnly 'org.apache.commons:commons-lang3:3.0'
  compileOnly 'javax.servlet:servlet-api:2.3'
  compileOnly 'com.auth0:java-jwt:3.8.0'
  compileOnly 'com.auth0:jwks-rsa:0.1.0'

  compileOnly 'io.service84.library:authutils:1.2.0'

  ////////////////////////////////
  //Test Dependencies/////////////
  ////////////////////////////////
  // This fulfils the SpringSecurityWeb 5.x.x requirement
  testImplementation 'org.springframework.boot:spring-boot-starter-security:2.4.2'

  // This fulfils the CommonLang 3.x.x requirement
  testImplementation 'org.apache.commons:commons-lang3:3.11'

  // This fulfils the JavaXServletAPI requirement
  testImplementation 'org.springframework.boot:spring-boot-starter-web:2.4.2'

  // This fulfils the JavaJWT 3.8+ requirement
  testImplementation 'com.auth0:java-jwt:3.13.0'

  // This fulfils the JWKS 0.1+ requirement
  testImplementation 'com.auth0:jwks-rsa:0.15.0'

  // This fulfils the S84AuthUtils 1.2+ requirement
  testImplementation 'io.service84.library:authutils:1.2.0'

  testImplementation 'org.springframework.boot:spring-boot-starter-test:2.4.2'
}

test {
  useJUnitPlatform()
}
